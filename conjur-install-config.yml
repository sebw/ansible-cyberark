---
- name: install/configure conjur on fresh server
  hosts: ca-conjur
  gather_facts: false
  vars:
    # location on remote server to save conjur git repo and files
    conjur_repo: /opt/conjur-repo
    # these are the secrets saved in conjur.  There is a secret named password and one named ansible.  Here I'm setting them as "redhat".
    password_var: redhat
    ansible_var: redhat

  tasks:
  - name: Create a directory if it does not exist
    file:
      path: "{{ conjur_repo }}"
      state: directory
      mode: '0755'

  - name: Get some utils installed and repo added
    shell: yum install -y yum-utils; yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    args:
      chdir: "{{ conjur_repo }}"

  - name: install docker/git
    yum:
      name: 
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - git
      state: latest

  - name: kill firewall
    service:
      name: firewalld
      enabled: no
      state: stopped

  - name: Enable service httpd, and not touch the state
    service:
      name: docker
      enabled: yes
      state: started

  - name: Grab docker compose
    shell: curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose; chmod +x /usr/local/bin/docker-compose
    args:
      chdir: "{{ conjur_repo }}"

  - name: clone cyberark quickstart repo
    git:
      repo: 'https://github.com/cyberark/conjur-quickstart.git'
      dest: "{{ conjur_repo }}"
      clone: yes
#      update: no

  - name: docker-compose pull - retry 3 times with a 5 second delay
    shell: docker-compose pull
    args:
      chdir: "{{ conjur_repo }}"
    retries: 3
    delay: 5

  - name: create conjur data key
    shell: docker-compose run --no-deps --rm conjur data-key generate > data_key
    args:
      chdir: "{{ conjur_repo }}"

  - name: read data key into variable
    shell: cat data_key
    args:
      chdir: "{{ conjur_repo }}"
    register: conjur_key

  - name: turn up containers
    shell: docker-compose up -d
    args:
      chdir: "{{ conjur_repo }}"
    environment:
      CONJUR_DATA_KEY: "{{ conjur_key.stdout }}"

  - name: create myConjurAccount and save to admin_data
    shell: docker-compose exec conjur conjurctl account create myConjurAccount > admin_data
    args:
      chdir: "{{ conjur_repo }}"
    environment:
      CONJUR_DATA_KEY: "{{ conjur_key.stdout }}"

  - name: init conjur client
    shell: docker-compose exec client conjur init -u conjur -a myConjurAccount
    args:
      chdir: "{{ conjur_repo }}"
    environment:
      CONJUR_DATA_KEY: "{{ conjur_key.stdout }}"

  - name: copy network profile template over
    template:
      src: network.yml.j2
      dest: "{{ conjur_repo }}/conf/policy/network.yml"

  - name: grap admin API key from file
    shell: cat admin_data | grep API
    args:
      chdir: "{{ conjur_repo }}"
    register: admin_data

  - name: set admin_key variable
    set_fact:
      admin_key: "{{ admin_data.stdout | regex_replace('API key for admin: ','') }}"

  - name: init conjur client
    shell: "docker-compose exec client conjur authn login -u admin -p {{ admin_key }}; docker-compose exec client conjur policy load root policy/network.yml > tower_data; docker-compose exec client conjur variable values add password {{ password_var }}; docker-compose exec client conjur variable values add ansible {{ ansible_var }}"
    args:
      chdir: "{{ conjur_repo }}"

  - name: grap tower API key from file
    shell: cat tower_data | grep api
    args:
      chdir: "{{ conjur_repo }}"
    register: tower_data

# openssl s_client -showcerts -connect localhost:8443 < /dev/null 2> /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
#  - name: grab nginx cert for tower
#    shell: openssl s_client -showcerts -connect localhost:8443 < /dev/null 2> /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
#    args:
#      chdir: "{{ conjur_repo }}"
#    register: pki_cert

  - name: grab nginx cert for tower and save to file
    shell: openssl s_client -showcerts -connect localhost:8443 < /dev/null 2> /dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > tower_pki_cert
    args:
      chdir: "{{ conjur_repo }}"
#    register: pki_cert

  - name: print out user info
    debug:
      msg: 
        - Conjur URL: https://proxy:8443
        - "API Key: {{ tower_data.stdout }}"
        - Account: myConjurAccount
        - Username: host/tower
#        - "Public Key Cert: {{ pki_cert.stdout_lines }}"
        - "Public Key Cert: in file at {{ conjur_repo }}/tower_pki_cert.  I couldn't get formatting to look right for copy paste, so grab from file."

